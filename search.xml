<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Leetcode刷题笔记——二叉树</title>
      <link href="/2021/10/21/%E4%BA%8C%E5%8F%89%E6%A0%91%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/"/>
      <url>/2021/10/21/%E4%BA%8C%E5%8F%89%E6%A0%91%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h2><h4 id="1-二叉树数的遍历"><a href="#1-二叉树数的遍历" class="headerlink" title="1.二叉树数的遍历"></a>1.二叉树数的遍历</h4><p>二叉树的遍历分为四种：前序、中序、后序、层级</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 二叉树遍历框架 */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">traverse</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 前序遍历</span></span><br><span class="line">    <span class="built_in">traverse</span>(root.left)</span><br><span class="line">    <span class="comment">// 中序遍历</span></span><br><span class="line">    <span class="built_in">traverse</span>(root.right)</span><br><span class="line">    <span class="comment">// 后序遍历</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><span id="more"></span> <h5 id="前序遍历"><a href="#前序遍历" class="headerlink" title="前序遍历"></a>前序遍历</h5><p>前序、中序、后序中的顺序指的是根节点遍历的顺序</p><p>遍历顺序： 根节点–&gt;左节点–&gt;右节点</p><ol start="144"><li><p><strong><a href="https://leetcode.com/problems/binary-tree-preorder-traversal/">Binary Tree Preorder Traversal</a></strong></p><p>Given the <code>root</code> of a binary tree, return <em>the preorder traversal of its nodes’ values</em>.</p><p><strong>Example 1:</strong></p></li></ol><p><img src="https://gitee.com/xue-zilong/images/raw/master/202110211034820.jpeg" alt="img"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: root = [<span class="number">1</span>,null,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">Output: [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br></pre></td></tr></table></figure><p>法一：递归</p><p>时间复杂度：O(n)    </p><p>空间复杂度：O(n)</p><p>递归代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">preorderTraversal</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="keyword">int</span>&gt; nodes;</span><br><span class="line">        <span class="built_in">preorder</span>(root, nodes);</span><br><span class="line">        <span class="keyword">return</span> nodes;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">preorder</span><span class="params">(TreeNode* root, vector&lt;<span class="keyword">int</span>&gt;&amp; nodes)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!root) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        nodes.<span class="built_in">push_back</span>(root -&gt; val);</span><br><span class="line">        <span class="built_in">preorder</span>(root -&gt; left, nodes);</span><br><span class="line">        <span class="built_in">preorder</span>(root -&gt; right, nodes);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>法二：栈</p><p>时间复杂度：O(n)    </p><p>空间复杂度：O(n)</p><p>代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">preorderTraversal</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!root) &#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        stack&lt;TreeNode*&gt; st; <span class="comment">//stack中存储的是节点指针</span></span><br><span class="line">        vector&lt;<span class="keyword">int</span>&gt; res；</span><br><span class="line">        st.<span class="built_in">push</span>(root);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(!st.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            root = st.<span class="built_in">top</span>(); </span><br><span class="line">            st.<span class="built_in">pop</span>(); </span><br><span class="line">            res.<span class="built_in">push_back</span>(root-&gt;val);</span><br><span class="line">            <span class="comment">//注意先push右节点，再push左节点</span></span><br><span class="line">            <span class="keyword">if</span> (root-&gt;right) &#123;</span><br><span class="line">                st.<span class="built_in">push</span>(root-&gt;right); </span><br><span class="line">            &#125;          </span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (root-&gt;left) &#123;</span><br><span class="line">                st.<span class="built_in">push</span>(root-&gt;left);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;；</span><br></pre></td></tr></table></figure><p>法三：Morris遍历</p><p>时间复杂度：O(n)    </p><p>空间复杂度：O(1)</p><p>算法步骤：</p><ol><li><p>如果当前节点的左子节点为空时，输出当前节点，并将当前节点置为该节点的右子节点；</p></li><li><p>如果当前节点的左子节点不为空，找到当前节点左子树的最右节点（该节点为当前节点中序遍历的前驱节点）；</p></li></ol><p>2.1. 如果最右节点的右指针为空(right=null)，将最右节点的右指针指向当前节点，并输出当前节点（在此处输出），当前节点置为其左子节点；</p><p>2.2. 如果最右节点的右指针不为空，将最右节点右指针重新置为空(恢复树的原状)，并将当前节点置为其右节点；</p><ol start="3"><li>重复1~2，直到当前节点为空。</li></ol><p><img src="https://gitee.com/xue-zilong/images/raw/master/202110211652335.jpeg" alt="img"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">preorderTraversal</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="keyword">int</span>&gt; nodes;</span><br><span class="line">        TreeNode* cur = root;</span><br><span class="line">        <span class="keyword">while</span> (cur) &#123;</span><br><span class="line">            <span class="keyword">if</span> (cur -&gt; left) &#123;</span><br><span class="line">                TreeNode* pre = cur -&gt; left;</span><br><span class="line">                <span class="keyword">while</span> (pre -&gt; right &amp;&amp; pre -&gt; right != cur) &#123;</span><br><span class="line">                    pre = pre -&gt; right;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (!pre -&gt; right) &#123;</span><br><span class="line">                    pre -&gt; right = cur;</span><br><span class="line">                    nodes.<span class="built_in">push_back</span>(cur -&gt; val);</span><br><span class="line">                    cur = cur -&gt; left;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    pre -&gt; right = <span class="literal">NULL</span>;</span><br><span class="line">                    cur = cur -&gt; right;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                nodes.<span class="built_in">push_back</span>(cur -&gt; val);</span><br><span class="line">                cur = cur -&gt; right;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nodes;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a>中序遍历</h5><p>遍历顺序：左节点–&gt;根节点–&gt;右节点</p><p>94.<a href="https://leetcode.com/problems/binary-tree-inorder-traversal/"><strong>Binary Tree Inorder Traversal</strong></a></p><p>法一：递归</p><p>代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">inorderTraversal</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="keyword">int</span>&gt; nodes;</span><br><span class="line">        <span class="built_in">inorder</span>(root, nodes);</span><br><span class="line">        <span class="keyword">return</span> nodes;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">inorder</span><span class="params">(TreeNode* root, vector&lt;<span class="keyword">int</span>&gt;&amp; nodes)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!root) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">inorder</span>(root -&gt; left, nodes);</span><br><span class="line">        <span class="comment">//仅仅改变了节点值输出的顺序</span></span><br><span class="line">        nodes.<span class="built_in">push_back</span>(root -&gt; val);  </span><br><span class="line">        <span class="built_in">inorder</span>(root -&gt; right, nodes);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>法二：栈</p><p>代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">inorderTraversal</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="keyword">int</span>&gt; nodes;</span><br><span class="line">        stack&lt;TreeNode*&gt; todo;</span><br><span class="line">        <span class="keyword">while</span> (root || !todo.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="comment">//遍历当前节点的左节点，将所有左节点存入栈</span></span><br><span class="line">            <span class="keyword">while</span> (root) &#123;</span><br><span class="line">                todo.<span class="built_in">push</span>(root);</span><br><span class="line">                root = root -&gt; left;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//按顺序输出左节点、根节点，再将root指向右节点遍历当前节点的右子树</span></span><br><span class="line">            root = todo.<span class="built_in">top</span>();</span><br><span class="line">            todo.<span class="built_in">pop</span>();</span><br><span class="line">            nodes.<span class="built_in">push_back</span>(root -&gt; val);</span><br><span class="line">            <span class="comment">//当root为叶子节点时，root指向NULL，下一次循环输出其父系节点</span></span><br><span class="line">            root = root -&gt; right;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nodes;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>法三：Morris</p><p>代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">inorderTraversal</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="keyword">int</span>&gt; nodes;</span><br><span class="line">        TreeNode* cur = root;</span><br><span class="line">        <span class="keyword">while</span> (cur) &#123;</span><br><span class="line">            <span class="keyword">if</span> (cur -&gt; left) &#123;</span><br><span class="line">                TreeNode* pre = cur -&gt; left;</span><br><span class="line">                <span class="keyword">while</span> (pre -&gt; right &amp;&amp; pre -&gt; right != cur) &#123;</span><br><span class="line">                    pre = pre -&gt; right;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (!pre -&gt; right) &#123;</span><br><span class="line">                    pre -&gt; right = cur;</span><br><span class="line">                    <span class="comment">//前序是在这里输出</span></span><br><span class="line">                    cur = cur -&gt; left;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    pre -&gt; right = <span class="literal">NULL</span>;</span><br><span class="line">                    <span class="comment">//中序在这里输出，输出的位置改变</span></span><br><span class="line">                    nodes.<span class="built_in">push_back</span>(cur -&gt; val);</span><br><span class="line">                    cur = cur -&gt; right;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                nodes.<span class="built_in">push_back</span>(cur -&gt; val);</span><br><span class="line">                cur = cur -&gt; right;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nodes;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="后序遍历"><a href="#后序遍历" class="headerlink" title="后序遍历"></a>后序遍历</h5><p>145.<strong><a href="https://leetcode.com/problems/binary-tree-postorder-traversal/">Binary Tree Postorder Traversal</a></strong></p><p>法一：递归</p><p>代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">postorderTraversal</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="keyword">int</span>&gt; nodes;</span><br><span class="line">        <span class="built_in">postorder</span>(root, nodes);</span><br><span class="line">        <span class="keyword">return</span> nodes;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">postorder</span><span class="params">(TreeNode* root, vector&lt;<span class="keyword">int</span>&gt;&amp; nodes)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!root) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">postorder</span>(root -&gt; left, nodes);</span><br><span class="line">        <span class="built_in">postorder</span>(root -&gt; right, nodes);</span><br><span class="line">        <span class="comment">//后序遍历</span></span><br><span class="line">        nodes.<span class="built_in">push_back</span>(root -&gt; val);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>法二：栈</p><p>代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">postorderTraversal</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="keyword">int</span>&gt; nodes;</span><br><span class="line">        stack&lt;TreeNode*&gt; todo;</span><br><span class="line">        TreeNode* last = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">while</span> (root || !todo.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (root) &#123;</span><br><span class="line">                todo.<span class="built_in">push</span>(root);</span><br><span class="line">                root = root -&gt; left;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                TreeNode* node = todo.<span class="built_in">top</span>();</span><br><span class="line">                <span class="keyword">if</span> (node -&gt; right &amp;&amp; last != node -&gt; right) &#123;</span><br><span class="line">                    root = node -&gt; right;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    nodes.<span class="built_in">push_back</span>(node -&gt; val);</span><br><span class="line">                    last = node;</span><br><span class="line">                    todo.<span class="built_in">pop</span>();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nodes;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>法三：Morris</p><p>代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">postorderTraversal</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="keyword">int</span>&gt; nodes;</span><br><span class="line">        TreeNode* dummy = <span class="keyword">new</span> <span class="built_in">TreeNode</span>(<span class="number">0</span>);</span><br><span class="line">        dummy -&gt; left = root;</span><br><span class="line">        TreeNode* cur = dummy;</span><br><span class="line">        <span class="keyword">while</span> (cur) &#123;</span><br><span class="line">            <span class="keyword">if</span> (cur -&gt; left) &#123;</span><br><span class="line">                TreeNode* pre = cur -&gt; left;</span><br><span class="line">                <span class="keyword">while</span> (pre -&gt; right &amp;&amp; (pre -&gt; right != cur)) &#123;</span><br><span class="line">                    pre = pre -&gt; right;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (!(pre -&gt; right)) &#123;</span><br><span class="line">                    pre -&gt; right = cur;</span><br><span class="line">                    cur = cur -&gt; left;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="built_in">reverseAddNodes</span>(cur -&gt; left, pre, nodes);</span><br><span class="line">                    pre -&gt; right = <span class="literal">NULL</span>;</span><br><span class="line">                    cur = cur -&gt; right;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                cur = cur -&gt; right;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nodes;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">reverseNodes</span><span class="params">(TreeNode* start, TreeNode* end)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (start == end) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        TreeNode* x = start;</span><br><span class="line">        TreeNode* y = start -&gt; right;</span><br><span class="line">        TreeNode* z;</span><br><span class="line">        <span class="keyword">while</span> (x != end) &#123;</span><br><span class="line">            z = y -&gt; right;</span><br><span class="line">            y -&gt; right = x;</span><br><span class="line">            x = y;</span><br><span class="line">            y = z;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">reverseAddNodes</span><span class="params">(TreeNode* start, TreeNode* end, vector&lt;<span class="keyword">int</span>&gt;&amp; nodes)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">reverseNodes</span>(start, end);</span><br><span class="line">        TreeNode* node = end;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            nodes.<span class="built_in">push_back</span>(node -&gt; val);</span><br><span class="line">            <span class="keyword">if</span> (node == start) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            node = node -&gt; right;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">reverseNodes</span>(end, start);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="层序遍历"><a href="#层序遍历" class="headerlink" title="层序遍历"></a>层序遍历</h5><ol start="102"><li><strong><a href="https://leetcode.com/problems/binary-tree-level-order-traversal/">Binary Tree Level Order Traversal</a></strong></li></ol><p>利用栈实现层序遍历</p><p>代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; <span class="built_in">levelOrder</span>(TreeNode* root) &#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; ans;</span><br><span class="line">        vector&lt;<span class="keyword">int</span>&gt; level;</span><br><span class="line">        queue&lt;TreeNode*&gt; nodes;</span><br><span class="line">        nodes.<span class="built_in">push</span>(root);</span><br><span class="line">        <span class="keyword">if</span> (!root) &#123;</span><br><span class="line">            <span class="keyword">return</span> ans;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (!nodes.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="keyword">int</span> len = nodes.<span class="built_in">size</span>();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">                TreeNode* cur = nodes.<span class="built_in">front</span>();</span><br><span class="line">                level.<span class="built_in">push_back</span>(cur -&gt; val);</span><br><span class="line">                nodes.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="keyword">if</span> (cur -&gt; left) &#123;</span><br><span class="line">                    nodes.<span class="built_in">push</span>(cur -&gt; left);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (cur -&gt; right) &#123;</span><br><span class="line">                    nodes.<span class="built_in">push</span>(cur -&gt; right);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            ans.<span class="built_in">push_back</span>(level);</span><br><span class="line">            level.<span class="built_in">clear</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol start="107"><li><strong><a href="https://leetcode.com/problems/binary-tree-level-order-traversal-ii/">Binary Tree Level Order Traversal II</a></strong></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 刷题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode刷题日志</title>
      <link href="/2021/10/14/Leetcode/"/>
      <url>/2021/10/14/Leetcode/</url>
      
        <content type="html"><![CDATA[<p>1.Two sum</p><p>数组找两个和为目标值的数</p><p>方法一：两个for循环（时间长）//穷举不推荐、时间复杂度O(n平方)</p><span id="more"></span> <p>方法二：哈希表，交换数组的下标和值，利用ordered_map,把所给数组的数作为key值（<em>table</em> <strong>[</strong> <em>a</em> <strong>[</strong> <em>i</em> <strong>]]</strong> <strong>=</strong> <em>i</em>），每次用target-nums【i】搜索key值，注意用来判断是否找到的语句： <em>if ( table . find ( numberToFind ) != table . end ())；</em></p><p><em>另外，建议在一个for循环内一边插入哈希表一边搜索判断，时间复杂度O（n）</em></p><p><strong>167. Two Sum II - Input array is sorted</strong></p><p><em>当数组是有序数组时，使用双指针法   O（n）省去了插入哈希表的时间</em></p><p><strong>88. Merge Sorted Array</strong></p><p><em>法一：用vector函数，先把nums2插入nums1，在排序</em></p><p><em>法二：双指针，从后面往前取较大值插入，（因为要把nums1作为插入后的数组）注意一开始插入的位置，巧用m–，n–</em></p><p><strong>4. Median of Two Sorted Arrays</strong></p><p><em>法一：使用vector函数，根据长度奇偶返回</em></p><p><em>法二：使用双指针法，时间复杂度更优，代码长一些（注意约束条件）</em></p><p>2.Two Sum II - Input array is sorted</p><p>特征：所给数组为有序数组（递增），找和为特定值的两个数</p><p>双指针法：一层循环，然后设置左指针、右指针（left、right）</p><p> <em>if ( a [ left ] + a [ right ] &lt; target ) left ++;</em></p><p> <em>if ( a [ left ] + a [ right ] &gt; target ) right++;</em></p><p>3.3Sum</p><p>特征：找数组中和为0的三元组（双指针变式）</p><p>先排序后，用for循环确定第一个数并且这个数小于等于0，在剩下的n-1个数中用双指针法while循环</p><p>2sum对应一个循环，3sum对应两重循环，4sum对应三重循环</p><p>注意：</p><p>为了避免vector<int>push_back相同的解，当后面一个数与当前数相同，skip。l</p><p><em>while ( left &lt; right &amp;&amp; a [ left + 1 ] == a [ left ]) left ++; //以免第二个数重复</em></p><p><em>while ( left &lt; right &amp;&amp; a [ right - 1 ] == a [ right ]) right –; //以免第三个数重复</em></p><p>​                    <em>left ++; // 前后指针都移动，下一次判断</em></p><p>​                    <em>right –;</em></p><p> <em>while ( i &lt; n-2 &amp;&amp; a [ i + 1 ] == a [ i ]) i ++; //以免第一个数重复</em></p><p><em>//</em></p><p><em>如果不避免重复，可以选用set防止重复，insert无法插入相同的数据，代码简单一些，但是运算时间会变长！</em></p><p><em>不推荐，时间复杂度和空间复杂度大大增加！如何将set转成vector：</em></p><p><em>set&lt;vector<int>&gt;    return vector&lt;vectro<int>&gt; { ans.begin(),a.end()}</em></p><p><strong>16. 3Sum Closest</strong></p><p><em>双指针变种，比3sum简单，只需要返回三个数的和</em></p><p>先排序后，用for循环确定第一个数，在剩下的n-1个数中用双指针法while循环</p><p>每次都比较一下（target-sum）绝对值大小即可</p><p><strong>454. 4Sum II</strong>  </p><p><strong>O(n^2)</strong></p><p><strong>当完成两两配对，转化成第一类无序two sum</strong></p><p><em>4个数组，两两搭配，两个for循环算出1、2两个数组之和存储进map中并记录出现次数；再两个for循环便求3、4数组中随机元素的和边判断map中是否存在，存在即n++</em></p><p><em>在一层循环的最上面加如下的判断：如果一开始的四个值之和就大于target那么退出循环，如果第一个值加上最后三个最大值小于target，跳过当前数选择下一个。</em></p><p>if(nums[i]+nums[i+1]&gt;target-nums[i+2]-nums[i+3]) break;</p><p>if(nums[i]+nums[n-3]+nums[n-2]+nums[n-1]&lt;target) continue;</p><p><strong>11. Container With Most Water</strong></p><p><em>双指针的小变形，左右指针，指向0和尾部，</em></p><p>关键代码：            </p><p>int h=min(height[left],height[right]);</p><p>​            water=max(water,(right-left)*h);</p><p>​            while(height[left]&lt;=h&amp;&amp;left&lt;right) left++;</p><p>​            while(height[right]&lt;=h&amp;&amp;left&lt;right) right–;    //每次至少移动一下right或者right指针（移动较小的）如果新指向的高比之前的还小，那么skip继续移动（高变小，长度right-left也小了，面积必然减少）</p><p><em>时间复杂度O（n）</em></p><p><strong>42. Trapping Rain Water</strong></p><p><em>从左右向中间计算，计算每一个宽度为1的水</em></p><p>while(left&lt;=right){</p><p>​            if(height[left]&lt;=height[right]){</p><p>​                if(height[left]&gt;=maxleft) maxleft=height[left];    左边最高的-当前高度就是盛水的高度</p><p>​                else res+=maxleft-height[left];        当有更高的墙，更新最大高度</p><p>​                left++;</p><p>​            }</p><p>​            else{</p><p>​                if(height[right]&gt;=maxright) maxright= height[right];</p><p>​                else res+=maxright-height[right];</p><p>​                right–;</p><p>​            }</p><p>​        }</p><p>(10条消息) 【LeetCode】31. Next Permutation 解题报告（Python &amp; C++）_负雪明烛-CSDN博客</p><p>*4.*4Sum</p><p>特征：找与目标值相等的 4 个数</p><p>三重循环即可，两层for循环确定前两个数，回到two sum问题，用 set 可避免重复结果（牺牲时间）</p><p>注意：用while（。。。）来保证四个数都不会重复</p><p>注意set返回格式：</p><p><em>vector &lt; int &gt; out { nums [ i ], nums [ j ], nums [ left ], nums [ right ]};</em></p><p><em>res . insert ( out );</em></p><p><em>5.</em> Remove Duplicates from Sorted Array l、 II</p><p>特征：去除有序序列中的重复数字（允许重复1、2次）</p><p>双指针法(覆盖法)</p><p>当a[i] != a[index-1] 用a[i]覆盖a[index]</p><p> <em>int index =</em> <strong>1/2</strong> <em>; //初始时index和i指针均指向索引为1的位置</em></p><p>​        <em>for ( int i =</em> <strong>1 /2</strong><em>; i &lt; a . size (); i ++) //用i指针扫描数组</em></p><p>​        <em>{</em></p><p>​            <em>if ( a [ i ] != a [ index -</em> <strong>1/2</strong> <em>]) //遇到不等数时，覆盖a[index]，index++</em></p><p>​            <em>{</em></p><p>​                <em>a [ index ] = a [ i ];</em></p><p>​                <em>index ++;</em></p><p>​            <em>} //index最后指向无重复序列末尾</em></p><p>​        <em>}</em></p><p>​        <em>return index ; //返回无重复序列的长度</em></p><p>6.JZ28 数组中出现次数超过一半的数字</p><p>法一：使用消解法或者是叫候选法的时候   第一次选出候选人的时候要记得票数+1，选择一个候选人，重复就票数+1，当票数为0时换候选人，最后留下众数，检验次数。</p><p>法二：使用unordered_map，值作为key，统计出现次数。</p><p><strong>7. Rotate Array</strong></p><p>问题：把数组循环左移</p><p>法一：先复制一个数组，使用额外的数组，索引i用i+k替换，然后把组织好的数组复制过去</p><p>关键步骤： <em>temp[(i+k)%n] = a[i]</em></p><p>法二：多次反转</p><p>Original List                   : 1 2 3 4 5 6 7</p><p>After reversing all numbers     : 7 6 5 4 3 2 1</p><p>After reversing first k numbers : 5 6 7 4 3 2 1</p><p>After revering last n-k numbers : 5 6 7 1 2 3 4 –&gt; Result</p><p>分析：O(n) O(1) 时间不变，节省空间</p><p> <em>reverse ( a . begin (), a . end ()); //反转所有元素</em></p><p> <em>reverse ( a . begin (), a . begin ()+ k ); //反转前k个元素</em></p><p> <em>reverse ( a . begin ()+ k , a . end ()); //反转剩余元素（注意reverse反转区间为前闭后开，故这里为a.begin()+k）</em></p><p>\8. Intersection of Two Arrays</p><p>问题：求两个数组的交集（不能有重复的数）</p><p>方法一： hash 表法，用 set 避免重复</p><p><em>unordered_set</em> <strong>&lt;***int***&gt;</strong> <em>m</em><strong>(<em><strong>nums1</strong></em>.<em><strong>begin</strong></em>(),</strong> <em>nums1</em><strong>.<em><strong>end</strong></em>());</strong> <em>//vector转set，避免重复</em></p>]]></content>
      
      
      
        <tags>
            
            <tag> 刷题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>起点</title>
      <link href="/2021/10/13/start/"/>
      <url>/2021/10/13/start/</url>
      
        <content type="html"><![CDATA[<p>Start…</p><span id="more"></span> <p><img src="https://gitee.com/xue-zilong/images/raw/master/202110150038809.jpg" alt="b67b9cdf160d44cda3ff56d838b71a09"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
