<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>五战托福—关于托福考试的一点点心得</title>
      <link href="/2023/12/09/Review%20for%20TOEFL/"/>
      <url>/2023/12/09/Review%20for%20TOEFL/</url>
      
        <content type="html"><![CDATA[<p>上来先贴一波托福分数吧，五战托福，最后一舞也是终于在申请季达到了自己的目标分数。</p><p><img src="https://cdn.jsdelivr.net/gh/Godzilla0209/BlogImage/img/202312091555182.png" alt="image-20231209155519885"></p><span id="more"></span> <p>写作可能是这次最令我惊喜的点了，考完觉得差不多27、28这样，但是出分居然拿到了人生第一个30分，这么看来新托福的写作（学术讨论）拿高分的难度可能有所降低？借用这个帖子，我想回忆一下自己曲折的考托过程吧。（后面也会有一些关于新托福备考的意见）</p><h3 id="初识托福—傲慢"><a href="#初识托福—傲慢" class="headerlink" title="初识托福—傲慢"></a>初识托福—傲慢</h3><p>大概是在大二下吧，我开始准备托福考试。我自认为英语水平还是不错的，是老江苏高考的最后一届，英语基本都是稳定在105+/120，进入大学以来呢，四级和六级出分都不错，四级（603），六级（596），可能也正因为如此吧，我一开始对托福的态度是有所轻视的，阅读部分得益于不错的英语基础，还算可以；但是托福另外三部分听力、口语、写作，本质都考察了听力水平，而我高中的听力水平应付四六级还算可以，但是面对托福就有点不够看了。当时我报名了XDF（不是广告）的辅导班，是每周末线下上课，但是后面由于COVID-19的原因，辅导班转成了线上教学，我之前对于托福的些许“傲慢”的态度与线上上课的低效率使得那一学期的托福课几乎没给我带来什么提升，暑假我自己练了一段时间的阅读和听力，然后去首考了托福，不出意料的，非常差劲，除了阅读28还算可以，听力仅仅只有16，口语（19）以及写作（21）只能算是普通了，不过当时想着时间还早，自己觉得也没尽全力，并没有很气馁；但是听力的分数还是对我有所打击的，毕竟考前觉得至少有个20分，结果出分之后确十分凄惨，也让我下定决心将重心转移到听力上。</p><h3 id="二战托福—低谷"><a href="#二战托福—低谷" class="headerlink" title="二战托福—低谷"></a>二战托福—低谷</h3><p>大三上我继续在课程的间隙中学习托福，大部分的时间都花在了听力上，主要训练方法就是精听，练习记笔记的方法（后面我也会继续聊到记笔记这个问题）另外也在Youtube看了不少Crash Course的课，恶补了一番基础学科的知识（生物、地理、天文、人文等等），十分推荐这个系列课程，感觉里面的很多知识托福的考试都有所涉及，如果时间充裕，是个非常好的托福前置课程（有知识+动画有趣）。说回托福，在大量听力训练过后，我的听力水平确实有所进步，但在听力部分还有一个明显的问题：我个人做题的时候，记笔记会严重影响我的听力质量，可能我本人是个单线程，在记笔记的过程中很容易遗漏信息，但是我当时还是非常认可记笔记的重要性的，所以觉得自己还是练习少了，后来事实证明练习多了之后确实有提升，但是于我而言，不记笔记反而是更适合我的方法。</p><p><img src="https://cdn.jsdelivr.net/gh/Godzilla0209/BlogImage/img/202312091940681.png" alt="image-20231209194008351"></p><p>在前后练习了大概2个月后，我又一次去参加了托福考试，比起上次去参加考试的心态，我这次对于考试更加自信了不少，上一次有很大一部分试一试的心态，然而出分之后还是给了我迎头一棒。没错，还是听力，在写听力的过程，我看错了听力部分时间，导致第一个section的最后一篇听力没时间做题（而且这篇听力还是我做过的原题），交了白卷，当时在考场直接懵了，第二个section也因此受了影响，中间休息过程中调整了一下状态，所以口语和写作的状态还算ok，最后果不其然，听力只有19，如果能答完题估计21-22？不过人生没有如果hhh，这次出分是阅读29，听力19，口语21，写作23，总分92，这在当时对我的打击还挺大的，毕竟就算听力没有失误，总分多2-3分，还是95左右，这离我的目标分数105还差很多。而且这次听力考试的经历也加深了我对于托福听力的恐惧，哎，托福听力，难以逾越的鸿沟啊。</p><h3 id="三战托福—险胜"><a href="#三战托福—险胜" class="headerlink" title="三战托福—险胜"></a>三战托福—险胜</h3><p>大三下，我继续硬着头皮自学托福，也许我妈有点看出了我的瓶颈，最终找了一个工作室（只做托福），报了听力、口语、写作三门课，其实仔细分析过成绩后，不难得出，我最大的提分点就是听力和写作，听力和写作都得至少25+，才有希望冲击105，不过当时我已经对托福展现出了些许倦态，105自认为依然是难以达到的高度，便放松了自己的期望，考到103、102就行，够用即可。工作室的老师教学经验确实丰富，写作课上确实学习不少答题技巧，综合写作在短期内确实有了进步，但是独立写作由于素材不够、写得少，提升并不显著，口语方面也是相同的原因，说的少+听的不够多，做题还是有所欠缺，听力方面，老师的方法和我之前练习差不大多，还是练习的质和量需要提升。由于之前两次听力的惨败，我对于这次的听力格外重视，在考前一周，空闲时间几乎一直戴着耳机听TPO，就单纯的听，不做题，后来考试证明确实有利于语感的提升。2023.7.15，我第三次冲刺托福，听力和阅读的出分非常不错29+26，听力（尽管碰到了加试）也算是一洗前耻，终于到达了26的高分，不过口语和写作比较普通一些，口语还是21，写作提升了2分，到了25，总分101也算是勉强达到了我内心的期望，但是101这个分数说多不多，说少不少，总有点尴尬的感觉。但我当时还有GRE没考，所以就先放下了托福，暑期备考起了GRE，准备GRE出分之后再回战托福，说不定能有一些别样的体会。</p><h3 id="重回托福—质疑"><a href="#重回托福—质疑" class="headerlink" title="重回托福—质疑"></a>重回托福—质疑</h3><p>暑假期间我学完了GRE，在9月份成功出分GRE，322+3.5，虽然不高，但也够用，GRE的学习也就告一段落。大四上学期开始，我的课并不多，申请也才刚刚开始（CS项目都比较晚，DDL最早的也是12月），我将目光又投向了托福，但我依然不是两个月前的那个少年，GRE的词汇轰炸使得我的词汇量达到了一个全新的高度，我应付托福的词汇量在面对GRE时屡屡受挫，在每天痛苦地背诵完要你命3k后，我感受到自己的词汇量来到了一个新的高度，也是时候重回托福，重新冲击那个似乎遥不可及的105。</p><p>在8月份-9月份期间，我恢复了听力的练习，托福的阅读在我如今的词汇量面前，显得有些“可笑”，感觉甚至有机会冲击满分；听力那段时间练习的是TPO20-40的老题，以及一些真题，口语方面我关注了吴奇老师的频道，b站和公众号都有，看完了综合以及独立口语的答题技巧后，也明白了之前口语的问题所在：听力信息有些没捕捉到，讲的时候没有挑重点，一股脑全讲了，但是时间又不够，只能加快语速，不仅表达不清晰，也容易出现卡顿。因此我开始练习挑选有用信息，并且故意把语速降下来，也加强了口语部分听力的练习。写作，是新托福改革后变化最大的一门，独立写作没了，变成了学术讨论，10min的时间也比较紧，但考完GRE的写作之后，我发现其中有些共通之处，在从写作老师那边取完经之后，我也就确定了新托福学术讨论的写作结构—先踩后捧，两方观点选择一方，先批判另一方的观点，再想一个新的理由支持这一方的观点，这样不仅在结构还是文章字数方面，都可以兼顾。同时那段时期Chatgpt正是火热，我也使用它来帮助我英语写作，优化模板这类，效果看来还是很不错的，我学术讨论使用GPT总结了一份模板，考场上只需要想正方理由+论述+反方的缺点即可，总体来看就是先让步，说明反方的观点合理的部分，再转折批判反方错误的地方，最后说明自己的支持方，给出一个新的理由（不是文章给出的），再进行一定字数的阐述即可。新托福的学术讨论对于打字速度有一定的要求，10分钟要看完题目并且写完100多字的作文还是有难度的，而且想要拿到高分，字数最好能有150+。</p><p><img src="https://cdn.jsdelivr.net/gh/Godzilla0209/BlogImage/img/202312091935485.png" alt="image-20231209193510422"></p><p>9.15我第四次参加了托福，听力这份过去的痛苦回忆再一次袭来，尽管再考场中做听力还算得心应手，但是出分之后22的分数让我十分错愕，我又一次，对自己的听力产生了怀疑。阅读还是万年的29，口语有了提升—22，写作也确实有了提升—27，总分100，还比上次低了一分，让我对自己的英语水平又产生了怀疑，我真的变强了吗？101的分数对于我来说是不是已经达到了极限？词汇量的提升带来的语感是不是一个假象？我一度纠结于是否还要再战托福，4次托福的经历依然让我有些疲惫，我开始质疑花这么多的时间在托福上是否值得。</p><h3 id="最后一舞—重生"><a href="#最后一舞—重生" class="headerlink" title="最后一舞—重生"></a>最后一舞—重生</h3><p>在经历了上次一战之后，我其实已经没有再考托福的勇气，101也够了，冲刺105的想法也就放下了，不过和我爸的一通电话之后，我还是决定再战一回，他说既然你都决定去美国读书，英语能力是必须要锻炼的，你备考托福也是提升英语能力的方法之一，那么既然如此，何不再考一次呢？你花在托福上面的时间并不是白费的。老实的说，我不愿面对托福并不是时间紧迫（离项目DDL还有2个月多），而是害怕看到自己再考出失望的分数，但是既然选择了这条路，英语就是必要的一环，是必须逾越的困难，所以最终我还是决定再考一次吧，不管结果如何。</p><p>听力这次吸取了教训，感觉新托福的听力稍微变难一些，题目比如主旨题，选项更加的具有迷惑性，所以听懂文章更是至关重要的，笔记反而没有那么重要了，因此这次训练我采取了椅听的方法—也就是不记笔记，纯听，训练的题目也不是老TPO（太简单了），全部换成了真题。口语方面加强了训练，之前对于独立口语属于一种放任的感觉，这次稍微积累了一些素材，对于T2、3、4的听力都多训练了好几篇，反复精听，熟悉口语的答题模板，过程中也参考了HUGE口语，感觉虎哥的独立口语素材是非常不错的，但是综合口语我个人更喜欢吴奇老师的答题风格：并不一定要答的很全面，但是重点都有，语调虽慢，但是流畅。写作经过上次的考试，我也知道自己的方法是正确的，综合写作需要350+的字数，对于细节最好需要全部听到展现出来；学术讨论字数最好150+，冲刺200，我优化了模板，模板字数就有90词，考场只需要想正方的理由+论述+反方的驳斥点，加起来70-90字就足矣，合起来文章就有160+的字数了，剩下就是练习打字速度，我进行了很多模拟训练，来看自己能否达到写作速度的要求；我在JD上买了考场的同款键盘，考前3天每天练4-5篇的写作，主要是熟悉打字，因为上一次在考场上，可能是键盘不熟悉，打字快起来容易出错，就需要删除再打，会浪费很多的时间，所以这次提前训练，希望考场上可以直接倒背如流。</p><p>10.15号，这是我最后一次去考托福，考试地点是南大的随园校区（推荐南京的小伙伴去这个考场，设备各方面都很不错）。阅读、听力、口语、写作整体都不错，写作由于之前的打字训练，综合写作写完380字后还有3分钟，检查了一遍语病，查出了好几个低级的语法错误。学术讨论这次写了200字，还留了1分钟进行检查。阅读、听力出分是29、25，阅读看来满分无望了hhh，一直是万年的29分，听力25其实我内心已经很满意了，新托福的听力难度确实有所上升，尽管比历史最高低了一份，我也心满意足了，剩下就是等待口语+写作了。写作我预估是28左右，不过算了算分数，口语感觉没有发挥那么好，估计23、24，所以内心也是希望写作可以多挣口气，总分突破105，最终结果呢，我写作分数惊人地拿到了30分，口语23分，我已经十分满意了，以总分107完美收官，托福这一役也就此结束，感慨很多，但是简答一点的话就是：不要轻视托福，也不要害怕托福，托福毕竟也是应试考试，只要训练地够多，肯定是会有分数上的提升。</p><p>祝同在申请季的小伙伴们一切顺利，也祝同在备考托福的同学早日出分！</p><p><img src="https://cdn.jsdelivr.net/gh/Godzilla0209/BlogImage/img/202312091939638.png" alt="image-20231209193858282"></p><img src="https://cdn.jsdelivr.net/gh/Godzilla0209/BlogImage/img/202312092005922.png" alt="image-20231209200528497" style="zoom:67%;" /><p><img src="https://cdn.jsdelivr.net/gh/Godzilla0209/BlogImage/img/202312091941636.png" alt="image-20231209194125435"></p>]]></content>
      
      
      <categories>
          
          <category> 留学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 留学 </tag>
            
            <tag> 托福 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode刷题笔记——二叉树</title>
      <link href="/2021/10/21/%E4%BA%8C%E5%8F%89%E6%A0%91%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/"/>
      <url>/2021/10/21/%E4%BA%8C%E5%8F%89%E6%A0%91%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h2><h4 id="1-二叉树数的遍历"><a href="#1-二叉树数的遍历" class="headerlink" title="1.二叉树数的遍历"></a>1.二叉树数的遍历</h4><p>二叉树的遍历分为四种：前序、中序、后序、层级</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 二叉树遍历框架 */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">traverse</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 前序遍历</span></span><br><span class="line">    <span class="built_in">traverse</span>(root.left)</span><br><span class="line">    <span class="comment">// 中序遍历</span></span><br><span class="line">    <span class="built_in">traverse</span>(root.right)</span><br><span class="line">    <span class="comment">// 后序遍历</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><span id="more"></span> <h5 id="前序遍历"><a href="#前序遍历" class="headerlink" title="前序遍历"></a>前序遍历</h5><p>前序、中序、后序中的顺序指的是根节点遍历的顺序</p><p>遍历顺序： 根节点–&gt;左节点–&gt;右节点</p><ol start="144"><li><p><strong><a href="https://leetcode.com/problems/binary-tree-preorder-traversal/">Binary Tree Preorder Traversal</a></strong></p><p>Given the <code>root</code> of a binary tree, return <em>the preorder traversal of its nodes’ values</em>.</p><p><strong>Example 1:</strong></p></li></ol><p><img src="https://gitee.com/xue-zilong/images/raw/master/202110211034820.jpeg" alt="img"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: root = [<span class="number">1</span>,null,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">Output: [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br></pre></td></tr></table></figure><p>法一：递归</p><p>时间复杂度：O(n)    </p><p>空间复杂度：O(n)</p><p>递归代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">preorderTraversal</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="keyword">int</span>&gt; nodes;</span><br><span class="line">        <span class="built_in">preorder</span>(root, nodes);</span><br><span class="line">        <span class="keyword">return</span> nodes;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">preorder</span><span class="params">(TreeNode* root, vector&lt;<span class="keyword">int</span>&gt;&amp; nodes)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!root) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        nodes.<span class="built_in">push_back</span>(root -&gt; val);</span><br><span class="line">        <span class="built_in">preorder</span>(root -&gt; left, nodes);</span><br><span class="line">        <span class="built_in">preorder</span>(root -&gt; right, nodes);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>法二：栈</p><p>时间复杂度：O(n)    </p><p>空间复杂度：O(n)</p><p>代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">preorderTraversal</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!root) &#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        stack&lt;TreeNode*&gt; st; <span class="comment">//stack中存储的是节点指针</span></span><br><span class="line">        vector&lt;<span class="keyword">int</span>&gt; res；</span><br><span class="line">        st.<span class="built_in">push</span>(root);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(!st.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            root = st.<span class="built_in">top</span>(); </span><br><span class="line">            st.<span class="built_in">pop</span>(); </span><br><span class="line">            res.<span class="built_in">push_back</span>(root-&gt;val);</span><br><span class="line">            <span class="comment">//注意先push右节点，再push左节点</span></span><br><span class="line">            <span class="keyword">if</span> (root-&gt;right) &#123;</span><br><span class="line">                st.<span class="built_in">push</span>(root-&gt;right); </span><br><span class="line">            &#125;          </span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (root-&gt;left) &#123;</span><br><span class="line">                st.<span class="built_in">push</span>(root-&gt;left);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;；</span><br></pre></td></tr></table></figure><p>法三：Morris遍历</p><p>时间复杂度：O(n)    </p><p>空间复杂度：O(1)</p><p>算法步骤：</p><ol><li><p>如果当前节点的左子节点为空时，输出当前节点，并将当前节点置为该节点的右子节点；</p></li><li><p>如果当前节点的左子节点不为空，找到当前节点左子树的最右节点（该节点为当前节点中序遍历的前驱节点）；</p></li></ol><p>2.1. 如果最右节点的右指针为空(right=null)，将最右节点的右指针指向当前节点，并输出当前节点（在此处输出），当前节点置为其左子节点；</p><p>2.2. 如果最右节点的右指针不为空，将最右节点右指针重新置为空(恢复树的原状)，并将当前节点置为其右节点；</p><ol start="3"><li>重复1~2，直到当前节点为空。</li></ol><p><img src="https://gitee.com/xue-zilong/images/raw/master/202110211652335.jpeg" alt="img"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">preorderTraversal</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="keyword">int</span>&gt; nodes;</span><br><span class="line">        TreeNode* cur = root;</span><br><span class="line">        <span class="keyword">while</span> (cur) &#123;</span><br><span class="line">            <span class="keyword">if</span> (cur -&gt; left) &#123;</span><br><span class="line">                TreeNode* pre = cur -&gt; left;</span><br><span class="line">                <span class="keyword">while</span> (pre -&gt; right &amp;&amp; pre -&gt; right != cur) &#123;</span><br><span class="line">                    pre = pre -&gt; right;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (!pre -&gt; right) &#123;</span><br><span class="line">                    pre -&gt; right = cur;</span><br><span class="line">                    nodes.<span class="built_in">push_back</span>(cur -&gt; val);</span><br><span class="line">                    cur = cur -&gt; left;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    pre -&gt; right = <span class="literal">NULL</span>;</span><br><span class="line">                    cur = cur -&gt; right;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                nodes.<span class="built_in">push_back</span>(cur -&gt; val);</span><br><span class="line">                cur = cur -&gt; right;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nodes;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a>中序遍历</h5><p>遍历顺序：左节点–&gt;根节点–&gt;右节点</p><p>94.<a href="https://leetcode.com/problems/binary-tree-inorder-traversal/"><strong>Binary Tree Inorder Traversal</strong></a></p><p>法一：递归</p><p>代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">inorderTraversal</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="keyword">int</span>&gt; nodes;</span><br><span class="line">        <span class="built_in">inorder</span>(root, nodes);</span><br><span class="line">        <span class="keyword">return</span> nodes;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">inorder</span><span class="params">(TreeNode* root, vector&lt;<span class="keyword">int</span>&gt;&amp; nodes)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!root) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">inorder</span>(root -&gt; left, nodes);</span><br><span class="line">        <span class="comment">//仅仅改变了节点值输出的顺序</span></span><br><span class="line">        nodes.<span class="built_in">push_back</span>(root -&gt; val);  </span><br><span class="line">        <span class="built_in">inorder</span>(root -&gt; right, nodes);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>法二：栈</p><p>代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">inorderTraversal</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="keyword">int</span>&gt; nodes;</span><br><span class="line">        stack&lt;TreeNode*&gt; todo;</span><br><span class="line">        <span class="keyword">while</span> (root || !todo.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="comment">//遍历当前节点的左节点，将所有左节点存入栈</span></span><br><span class="line">            <span class="keyword">while</span> (root) &#123;</span><br><span class="line">                todo.<span class="built_in">push</span>(root);</span><br><span class="line">                root = root -&gt; left;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//按顺序输出左节点、根节点，再将root指向右节点遍历当前节点的右子树</span></span><br><span class="line">            root = todo.<span class="built_in">top</span>();</span><br><span class="line">            todo.<span class="built_in">pop</span>();</span><br><span class="line">            nodes.<span class="built_in">push_back</span>(root -&gt; val);</span><br><span class="line">            <span class="comment">//当root为叶子节点时，root指向NULL，下一次循环输出其父系节点</span></span><br><span class="line">            root = root -&gt; right;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nodes;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>法三：Morris</p><p>代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">inorderTraversal</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="keyword">int</span>&gt; nodes;</span><br><span class="line">        TreeNode* cur = root;</span><br><span class="line">        <span class="keyword">while</span> (cur) &#123;</span><br><span class="line">            <span class="keyword">if</span> (cur -&gt; left) &#123;</span><br><span class="line">                TreeNode* pre = cur -&gt; left;</span><br><span class="line">                <span class="keyword">while</span> (pre -&gt; right &amp;&amp; pre -&gt; right != cur) &#123;</span><br><span class="line">                    pre = pre -&gt; right;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (!pre -&gt; right) &#123;</span><br><span class="line">                    pre -&gt; right = cur;</span><br><span class="line">                    <span class="comment">//前序是在这里输出</span></span><br><span class="line">                    cur = cur -&gt; left;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    pre -&gt; right = <span class="literal">NULL</span>;</span><br><span class="line">                    <span class="comment">//中序在这里输出，输出的位置改变</span></span><br><span class="line">                    nodes.<span class="built_in">push_back</span>(cur -&gt; val);</span><br><span class="line">                    cur = cur -&gt; right;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                nodes.<span class="built_in">push_back</span>(cur -&gt; val);</span><br><span class="line">                cur = cur -&gt; right;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nodes;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="后序遍历"><a href="#后序遍历" class="headerlink" title="后序遍历"></a>后序遍历</h5><p>145.<strong><a href="https://leetcode.com/problems/binary-tree-postorder-traversal/">Binary Tree Postorder Traversal</a></strong></p><p>法一：递归</p><p>代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">postorderTraversal</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="keyword">int</span>&gt; nodes;</span><br><span class="line">        <span class="built_in">postorder</span>(root, nodes);</span><br><span class="line">        <span class="keyword">return</span> nodes;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">postorder</span><span class="params">(TreeNode* root, vector&lt;<span class="keyword">int</span>&gt;&amp; nodes)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!root) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">postorder</span>(root -&gt; left, nodes);</span><br><span class="line">        <span class="built_in">postorder</span>(root -&gt; right, nodes);</span><br><span class="line">        <span class="comment">//后序遍历</span></span><br><span class="line">        nodes.<span class="built_in">push_back</span>(root -&gt; val);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>法二：栈</p><p>代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">postorderTraversal</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="keyword">int</span>&gt; nodes;</span><br><span class="line">        stack&lt;TreeNode*&gt; todo;</span><br><span class="line">        TreeNode* last = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">while</span> (root || !todo.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (root) &#123;</span><br><span class="line">                todo.<span class="built_in">push</span>(root);</span><br><span class="line">                root = root -&gt; left;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                TreeNode* node = todo.<span class="built_in">top</span>();</span><br><span class="line">                <span class="keyword">if</span> (node -&gt; right &amp;&amp; last != node -&gt; right) &#123;</span><br><span class="line">                    root = node -&gt; right;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    nodes.<span class="built_in">push_back</span>(node -&gt; val);</span><br><span class="line">                    last = node;</span><br><span class="line">                    todo.<span class="built_in">pop</span>();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nodes;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>法三：Morris</p><p>代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">postorderTraversal</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="keyword">int</span>&gt; nodes;</span><br><span class="line">        TreeNode* dummy = <span class="keyword">new</span> <span class="built_in">TreeNode</span>(<span class="number">0</span>);</span><br><span class="line">        dummy -&gt; left = root;</span><br><span class="line">        TreeNode* cur = dummy;</span><br><span class="line">        <span class="keyword">while</span> (cur) &#123;</span><br><span class="line">            <span class="keyword">if</span> (cur -&gt; left) &#123;</span><br><span class="line">                TreeNode* pre = cur -&gt; left;</span><br><span class="line">                <span class="keyword">while</span> (pre -&gt; right &amp;&amp; (pre -&gt; right != cur)) &#123;</span><br><span class="line">                    pre = pre -&gt; right;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (!(pre -&gt; right)) &#123;</span><br><span class="line">                    pre -&gt; right = cur;</span><br><span class="line">                    cur = cur -&gt; left;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="built_in">reverseAddNodes</span>(cur -&gt; left, pre, nodes);</span><br><span class="line">                    pre -&gt; right = <span class="literal">NULL</span>;</span><br><span class="line">                    cur = cur -&gt; right;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                cur = cur -&gt; right;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nodes;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">reverseNodes</span><span class="params">(TreeNode* start, TreeNode* end)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (start == end) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        TreeNode* x = start;</span><br><span class="line">        TreeNode* y = start -&gt; right;</span><br><span class="line">        TreeNode* z;</span><br><span class="line">        <span class="keyword">while</span> (x != end) &#123;</span><br><span class="line">            z = y -&gt; right;</span><br><span class="line">            y -&gt; right = x;</span><br><span class="line">            x = y;</span><br><span class="line">            y = z;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">reverseAddNodes</span><span class="params">(TreeNode* start, TreeNode* end, vector&lt;<span class="keyword">int</span>&gt;&amp; nodes)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">reverseNodes</span>(start, end);</span><br><span class="line">        TreeNode* node = end;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            nodes.<span class="built_in">push_back</span>(node -&gt; val);</span><br><span class="line">            <span class="keyword">if</span> (node == start) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            node = node -&gt; right;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">reverseNodes</span>(end, start);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="层序遍历"><a href="#层序遍历" class="headerlink" title="层序遍历"></a>层序遍历</h5><ol start="102"><li><strong><a href="https://leetcode.com/problems/binary-tree-level-order-traversal/">Binary Tree Level Order Traversal</a></strong></li></ol><p>利用栈实现层序遍历</p><p>代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; <span class="built_in">levelOrder</span>(TreeNode* root) &#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; ans;</span><br><span class="line">        vector&lt;<span class="keyword">int</span>&gt; level;</span><br><span class="line">        queue&lt;TreeNode*&gt; nodes;</span><br><span class="line">        nodes.<span class="built_in">push</span>(root);</span><br><span class="line">        <span class="keyword">if</span> (!root) &#123;</span><br><span class="line">            <span class="keyword">return</span> ans;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (!nodes.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="keyword">int</span> len = nodes.<span class="built_in">size</span>();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">                TreeNode* cur = nodes.<span class="built_in">front</span>();</span><br><span class="line">                level.<span class="built_in">push_back</span>(cur -&gt; val);</span><br><span class="line">                nodes.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="keyword">if</span> (cur -&gt; left) &#123;</span><br><span class="line">                    nodes.<span class="built_in">push</span>(cur -&gt; left);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (cur -&gt; right) &#123;</span><br><span class="line">                    nodes.<span class="built_in">push</span>(cur -&gt; right);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            ans.<span class="built_in">push_back</span>(level);</span><br><span class="line">            level.<span class="built_in">clear</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol start="107"><li><strong><a href="https://leetcode.com/problems/binary-tree-level-order-traversal-ii/">Binary Tree Level Order Traversal II</a></strong></li></ol><p>给定一个二叉树，返回其节点值自底向上的层序遍历。 （即按从叶子节点所在层到根节点所在的层，逐层从左向右遍历）</p><p><img src="https://gitee.com/xue-zilong/images/raw/master/202110221202297.jpeg" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: root = [3,9,20,null,null,15,7]</span><br><span class="line">Output: [[15,7],[9,20],[3]]</span><br></pre></td></tr></table></figure><p>法一：栈，可利用上一题代码</p><p>只需加上：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">reverse</span>(ans.<span class="built_in">begin</span>(),ans.<span class="built_in">end</span>());</span><br></pre></td></tr></table></figure><p>法二：DFS</p><p>….</p><ol start="103"><li><strong><a href="https://leetcode.com/problems/binary-tree-zigzag-level-order-traversal/">Binary Tree Zigzag Level Order Traversal</a></strong></li></ol><p>Given the <code>root</code> of a binary tree, return <em>the zigzag level order traversal of its nodes’ values</em>. (i.e., from left to right, then right to left for the next level and alternate between).</p><p><img src="https://gitee.com/xue-zilong/images/raw/master/202110221217735.jpeg" alt="img"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: root = [<span class="number">3</span>,<span class="number">9</span>,<span class="number">20</span>,null,null,<span class="number">15</span>,<span class="number">7</span>]</span><br><span class="line">Output: [[<span class="number">3</span>],[<span class="number">20</span>,<span class="number">9</span>],[<span class="number">15</span>,<span class="number">7</span>]]</span><br></pre></td></tr></table></figure><p>层序遍历的变题，只需要添加 lefttoright 变量来控制每层输出的顺序：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; <span class="built_in">zigzagLevelOrder</span>(TreeNode* root) &#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; ans;</span><br><span class="line">        <span class="keyword">if</span> (!root) &#123;</span><br><span class="line">            <span class="keyword">return</span> ans;</span><br><span class="line">        &#125;</span><br><span class="line">        queue&lt;TreeNode*&gt; nodes;</span><br><span class="line">        nodes.<span class="built_in">push</span>(root);</span><br><span class="line">        <span class="keyword">bool</span> lefttoright = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">while</span> (!nodes.<span class="built_in">empty</span>())</span><br><span class="line">        &#123;   </span><br><span class="line">            <span class="keyword">int</span> size = nodes.<span class="built_in">size</span>();</span><br><span class="line">            <span class="comment">//提前分配好vector数组的空间</span></span><br><span class="line">            <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">level</span><span class="params">(size)</span></span>; </span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                TreeNode *root = nodes.<span class="built_in">front</span>();</span><br><span class="line">                nodes.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="keyword">if</span> (root -&gt; left) &#123;</span><br><span class="line">                    nodes.<span class="built_in">push</span>(root -&gt; left);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (root -&gt; right) &#123;</span><br><span class="line">                    nodes.<span class="built_in">push</span>(root -&gt; right);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//lefttoright参数为true，说明从左向右输出，否则从右向左输出</span></span><br><span class="line">                <span class="keyword">if</span> (lefttoright) </span><br><span class="line">                    level[i] = root -&gt; val;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    level[size-i<span class="number">-1</span>] = root-&gt;val;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//这里是调试语句，Leetcode支持cout调试</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; level.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">                cout &lt;&lt; level[i] &lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//这里是调试语句，Leetcode支持cout调试</span></span><br><span class="line">            ans.<span class="built_in">push_back</span>(level);</span><br><span class="line">            lefttoright =! lefttoright;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">       <span class="keyword">return</span> ans; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="2-构建二叉树"><a href="#2-构建二叉树" class="headerlink" title="2.构建二叉树"></a>2.构建二叉树</h4><ol start="1028"><li><a href="https://leetcode.com/problems/recover-a-tree-from-preorder-traversal/">Recover a Tree From Preorder Traversal</a></li></ol><p>我们从二叉树的根节点 root 开始进行深度优先搜索。</p><p>在遍历中的每个节点处，我们输出 D 条短划线（其中 D 是该节点的深度），然后输出该节点的值。（如果节点的深度为 D，则其直接子节点的深度为 D + 1。根节点的深度为 0）。</p><p>如果节点只有一个子节点，那么保证该子节点为左子节点。</p><p>给出遍历输出 S，还原树并返回其根节点 root。</p><p><img src="https://gitee.com/xue-zilong/images/raw/master/202110221332602.png" alt="img"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: traversal = <span class="string">&quot;1-2--3--4-5--6--7&quot;</span></span><br><span class="line">Output: [<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">7</span>]</span><br></pre></td></tr></table></figure><p>法一：栈</p><p>代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">TreeNode* <span class="title">recoverFromPreorder</span><span class="params">(string S)</span> </span>&#123;</span><br><span class="line">        vector&lt;TreeNode*&gt; stack;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, level, val; i &lt; S.<span class="built_in">length</span>();) &#123;</span><br><span class="line">            <span class="comment">//计算当前节点所在层数</span></span><br><span class="line">            <span class="keyword">for</span> (level = <span class="number">0</span>; S[i] == <span class="string">&#x27;-&#x27;</span>; i++)</span><br><span class="line">                level++;</span><br><span class="line">            <span class="comment">//计算节点的val</span></span><br><span class="line">            <span class="keyword">for</span> (val = <span class="number">0</span>; i &lt; S.<span class="built_in">length</span>() &amp;&amp; S[i] != <span class="string">&#x27;-&#x27;</span>; i++)</span><br><span class="line">                val = val * <span class="number">10</span> + S[i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            TreeNode* node = <span class="keyword">new</span> <span class="built_in">TreeNode</span>(val);</span><br><span class="line">            <span class="comment">//如果栈中的元素大于当前层数，说明到左子树的底部，pop出左叶子节点，接上右节点</span></span><br><span class="line">            <span class="keyword">while</span> (stack.<span class="built_in">size</span>() &gt; level) stack.<span class="built_in">pop_back</span>();</span><br><span class="line">            <span class="comment">//优先创建左节点，在创建右节点</span></span><br><span class="line">            <span class="keyword">if</span> (!stack.<span class="built_in">empty</span>())</span><br><span class="line">                <span class="keyword">if</span> (!stack.<span class="built_in">back</span>()-&gt;left) stack.<span class="built_in">back</span>()-&gt;left = node;</span><br><span class="line">                <span class="keyword">else</span> stack.<span class="built_in">back</span>()-&gt;right = node;</span><br><span class="line">            stack.<span class="built_in">push_back</span>(node);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">//返回根节点</span></span><br><span class="line">        <span class="keyword">return</span> stack[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 刷题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode刷题日志</title>
      <link href="/2021/10/14/Leetcode/"/>
      <url>/2021/10/14/Leetcode/</url>
      
        <content type="html"><![CDATA[<p>1.Two sum</p><p>数组找两个和为目标值的数</p><p>方法一：两个for循环（时间长）//穷举不推荐、时间复杂度O(n平方)</p><span id="more"></span> <p>方法二：哈希表，交换数组的下标和值，利用ordered_map,把所给数组的数作为key值（<em>table</em> <strong>[</strong> <em>a</em> <strong>[</strong> <em>i</em> <strong>]]</strong> <strong>=</strong> <em>i</em>），每次用target-nums【i】搜索key值，注意用来判断是否找到的语句： <em>if ( table . find ( numberToFind ) != table . end ())；</em></p><p><em>另外，建议在一个for循环内一边插入哈希表一边搜索判断，时间复杂度O（n）</em></p><p><strong>167. Two Sum II - Input array is sorted</strong></p><p><em>当数组是有序数组时，使用双指针法   O（n）省去了插入哈希表的时间</em></p><p><strong>88. Merge Sorted Array</strong></p><p><em>法一：用vector函数，先把nums2插入nums1，在排序</em></p><p><em>法二：双指针，从后面往前取较大值插入，（因为要把nums1作为插入后的数组）注意一开始插入的位置，巧用m–，n–</em></p><p><strong>4. Median of Two Sorted Arrays</strong></p><p><em>法一：使用vector函数，根据长度奇偶返回</em></p><p><em>法二：使用双指针法，时间复杂度更优，代码长一些（注意约束条件）</em></p><p>2.Two Sum II - Input array is sorted</p><p>特征：所给数组为有序数组（递增），找和为特定值的两个数</p><p>双指针法：一层循环，然后设置左指针、右指针（left、right）</p><p> <em>if ( a [ left ] + a [ right ] &lt; target ) left ++;</em></p><p> <em>if ( a [ left ] + a [ right ] &gt; target ) right++;</em></p><p>3.3Sum</p><p>特征：找数组中和为0的三元组（双指针变式）</p><p>先排序后，用for循环确定第一个数并且这个数小于等于0，在剩下的n-1个数中用双指针法while循环</p><p>2sum对应一个循环，3sum对应两重循环，4sum对应三重循环</p><p>注意：</p><p>为了避免vector<int>push_back相同的解，当后面一个数与当前数相同，skip。l</p><p><em>while ( left &lt; right &amp;&amp; a [ left + 1 ] == a [ left ]) left ++; //以免第二个数重复</em></p><p><em>while ( left &lt; right &amp;&amp; a [ right - 1 ] == a [ right ]) right –; //以免第三个数重复</em></p><p>​                    <em>left ++; // 前后指针都移动，下一次判断</em></p><p>​                    <em>right –;</em></p><p> <em>while ( i &lt; n-2 &amp;&amp; a [ i + 1 ] == a [ i ]) i ++; //以免第一个数重复</em></p><p><em>//</em></p><p><em>如果不避免重复，可以选用set防止重复，insert无法插入相同的数据，代码简单一些，但是运算时间会变长！</em></p><p><em>不推荐，时间复杂度和空间复杂度大大增加！如何将set转成vector：</em></p><p><em>set&lt;vector<int>&gt;    return vector&lt;vectro<int>&gt; { ans.begin(),a.end()}</em></p><p><strong>16. 3Sum Closest</strong></p><p><em>双指针变种，比3sum简单，只需要返回三个数的和</em></p><p>先排序后，用for循环确定第一个数，在剩下的n-1个数中用双指针法while循环</p><p>每次都比较一下（target-sum）绝对值大小即可</p><p><strong>454. 4Sum II</strong>  </p><p><strong>O(n^2)</strong></p><p><strong>当完成两两配对，转化成第一类无序two sum</strong></p><p><em>4个数组，两两搭配，两个for循环算出1、2两个数组之和存储进map中并记录出现次数；再两个for循环便求3、4数组中随机元素的和边判断map中是否存在，存在即n++</em></p><p><em>在一层循环的最上面加如下的判断：如果一开始的四个值之和就大于target那么退出循环，如果第一个值加上最后三个最大值小于target，跳过当前数选择下一个。</em></p><p>if(nums[i]+nums[i+1]&gt;target-nums[i+2]-nums[i+3]) break;</p><p>if(nums[i]+nums[n-3]+nums[n-2]+nums[n-1]&lt;target) continue;</p><p><strong>11. Container With Most Water</strong></p><p><em>双指针的小变形，左右指针，指向0和尾部，</em></p><p>关键代码：            </p><p>int h=min(height[left],height[right]);</p><p>​            water=max(water,(right-left)*h);</p><p>​            while(height[left]&lt;=h&amp;&amp;left&lt;right) left++;</p><p>​            while(height[right]&lt;=h&amp;&amp;left&lt;right) right–;    //每次至少移动一下right或者right指针（移动较小的）如果新指向的高比之前的还小，那么skip继续移动（高变小，长度right-left也小了，面积必然减少）</p><p><em>时间复杂度O（n）</em></p><p><strong>42. Trapping Rain Water</strong></p><p><em>从左右向中间计算，计算每一个宽度为1的水</em></p><p>while(left&lt;=right){</p><p>​            if(height[left]&lt;=height[right]){</p><p>​                if(height[left]&gt;=maxleft) maxleft=height[left];    左边最高的-当前高度就是盛水的高度</p><p>​                else res+=maxleft-height[left];        当有更高的墙，更新最大高度</p><p>​                left++;</p><p>​            }</p><p>​            else{</p><p>​                if(height[right]&gt;=maxright) maxright= height[right];</p><p>​                else res+=maxright-height[right];</p><p>​                right–;</p><p>​            }</p><p>​        }</p><p>(10条消息) 【LeetCode】31. Next Permutation 解题报告（Python &amp; C++）_负雪明烛-CSDN博客</p><p>*4.*4Sum</p><p>特征：找与目标值相等的 4 个数</p><p>三重循环即可，两层for循环确定前两个数，回到two sum问题，用 set 可避免重复结果（牺牲时间）</p><p>注意：用while（。。。）来保证四个数都不会重复</p><p>注意set返回格式：</p><p><em>vector &lt; int &gt; out { nums [ i ], nums [ j ], nums [ left ], nums [ right ]};</em></p><p><em>res . insert ( out );</em></p><p><em>5.</em> Remove Duplicates from Sorted Array l、 II</p><p>特征：去除有序序列中的重复数字（允许重复1、2次）</p><p>双指针法(覆盖法)</p><p>当a[i] != a[index-1] 用a[i]覆盖a[index]</p><p> <em>int index =</em> <strong>1/2</strong> <em>; //初始时index和i指针均指向索引为1的位置</em></p><p>​        <em>for ( int i =</em> <strong>1 /2</strong><em>; i &lt; a . size (); i ++) //用i指针扫描数组</em></p><p>​        <em>{</em></p><p>​            <em>if ( a [ i ] != a [ index -</em> <strong>1/2</strong> <em>]) //遇到不等数时，覆盖a[index]，index++</em></p><p>​            <em>{</em></p><p>​                <em>a [ index ] = a [ i ];</em></p><p>​                <em>index ++;</em></p><p>​            <em>} //index最后指向无重复序列末尾</em></p><p>​        <em>}</em></p><p>​        <em>return index ; //返回无重复序列的长度</em></p><p>6.JZ28 数组中出现次数超过一半的数字</p><p>法一：使用消解法或者是叫候选法的时候   第一次选出候选人的时候要记得票数+1，选择一个候选人，重复就票数+1，当票数为0时换候选人，最后留下众数，检验次数。</p><p>法二：使用unordered_map，值作为key，统计出现次数。</p><p><strong>7. Rotate Array</strong></p><p>问题：把数组循环左移</p><p>法一：先复制一个数组，使用额外的数组，索引i用i+k替换，然后把组织好的数组复制过去</p><p>关键步骤： <em>temp[(i+k)%n] = a[i]</em></p><p>法二：多次反转</p><p>Original List                   : 1 2 3 4 5 6 7</p><p>After reversing all numbers     : 7 6 5 4 3 2 1</p><p>After reversing first k numbers : 5 6 7 4 3 2 1</p><p>After revering last n-k numbers : 5 6 7 1 2 3 4 –&gt; Result</p><p>分析：O(n) O(1) 时间不变，节省空间</p><p> <em>reverse ( a . begin (), a . end ()); //反转所有元素</em></p><p> <em>reverse ( a . begin (), a . begin ()+ k ); //反转前k个元素</em></p><p> <em>reverse ( a . begin ()+ k , a . end ()); //反转剩余元素（注意reverse反转区间为前闭后开，故这里为a.begin()+k）</em></p><p>\8. Intersection of Two Arrays</p><p>问题：求两个数组的交集（不能有重复的数）</p><p>方法一： hash 表法，用 set 避免重复</p><p><em>unordered_set</em> <strong>&lt;***int***&gt;</strong> <em>m</em><strong>(<em><strong>nums1</strong></em>.<em><strong>begin</strong></em>(),</strong> <em>nums1</em><strong>.<em><strong>end</strong></em>());</strong> <em>//vector转set，避免重复</em></p>]]></content>
      
      
      <categories>
          
          <category> 刷题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>起点</title>
      <link href="/2021/10/13/start/"/>
      <url>/2021/10/13/start/</url>
      
        <content type="html"><![CDATA[<p>Start…</p><span id="more"></span> <p><img src="https://cdn.jsdelivr.net/gh/Godzilla0209/BlogImage/img/202312121110334.jpg" alt="202110150023272"></p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
